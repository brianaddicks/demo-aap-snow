---
- name: Take snapshot if required
  hosts: "{{ snow_configuration_item | default('vcenter') }}"
  gather_facts: false
  vars:
    - vcenter_creds: &vcenter_conn
        hostname: "{{ lookup('ansible.builtin.env', 'VMWARE_HOST') }}"
        username: "{{ lookup('ansible.builtin.env', 'VMWARE_USER') }}"
        password: "{{ lookup('ansible.builtin.env', 'VMWARE_PASSWORD') }}"

  tasks:
    - name: Create snapshot
      ansible.builtin.debug:
        var: hostvars

    # - name: Create a snapshot
    #   when: snow_snapshot is defined and
    #         snow_snapshot
    #   community.vmware.vmware_guest_snapshot:
    #     <<: *vcenter_conn
    #     datacenter: "{{ vcenter_datacenter }}"
    #     folder: "/{{ vcenter_datacenter }}/vm/{{ vcenter_vm_folder | default(omit) }}"
    #     name: "{{ snow_hostname }}"
    #     state: present
    #     snapshot_name: "{{ snow_cr_number | default('pre-patching') }}"
    #     description: pre-patching
    #   # delegate_to: localhost
    #   loop: "{{ snow_cr_task_info_records }}"
    #   register: vcenter_snapshot_info

    # - name: Set stats for SNOW Update
    #   when: snow_snapshot is defined and
    #         snow_snapshot
    #   ansible.builtin.set_stats:
    #     data:
    #       snow_request_state: approved
    #       snow_work_notes: >
    #         vCenter snapshot "{{ snow_cr_number }}" created at "{{ vcenter_snapshot_info.snapshot_results.current_snapshot.creation_time }}".
    # - name: Set stats for SNOW Update
    #   when: snow_snapshot is not defined or
    #         not snow_snapshot
    #   ansible.builtin.set_stats:
    #     data:
    #       snow_request_state: approved
    #       snow_work_notes: >
    #         No snapshot requested.

